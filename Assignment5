using System;
using System.Collections.Generic;

public interface IObserver
{
    void Update(float temperature, float humidity, float pressure);
}

public interface ISubject
{
    void RegisterObserver(IObserver observer);
    void RemoveObserver(IObserver observer);
    void NotifyObservers();
}

public class WeatherData : ISubject
{
    private List<IObserver> observers = new List<IObserver>();
    private float temperature;
    private float humidity;
    private float pressure;

    public float Temperature { get { return temperature; } }
    public float Humidity { get { return humidity; } }
    public float Pressure { get { return pressure; } }

    public void SetMeasurements(float temperature, float humidity, float pressure)
    {
        this.temperature = temperature;
        this.humidity = humidity;
        this.pressure = pressure;
        MeasurementsChanged();
    }

    public void MeasurementsChanged()
    {
        NotifyObservers();
    }

    public void RegisterObserver(IObserver observer)
    {
        observers.Add(observer);
    }

    public void RemoveObserver(IObserver observer)
    {
        observers.Remove(observer);
    }

    public void NotifyObservers()
    {
        foreach (var observer in observers)
        {
            observer.Update(temperature, humidity, pressure);
        }
    }
}

public class Display : IObserver
{
    public virtual void Update(float temperature, float humidity, float pressure)
    {
        // implementation specific to each display type
    }
}

public class CurrentConditionsDisplay : Display
{
    public override void Update(float temperature, float humidity, float pressure)
    {
        Console.WriteLine($"Current conditions: {temperature} degrees and {humidity}% humidity");
    }
}

public class StatisticsDisplay : Display
{
    public override void Update(float temperature, float humidity, float pressure)
    {
        Console.WriteLine($"Avg/Max/Min temperature: {temperature}/{temperature}/{temperature}");
    }
}

public class ForecastDisplay : Display
{
    public override void Update(float temperature, float humidity, float pressure)
    {
        Console.WriteLine("Forecast: Improving weather on the way!");
    }
}

class Program
{
    static void Main()
    {
        WeatherData weatherData = new WeatherData();

        CurrentConditionsDisplay currentConditionsDisplay = new CurrentConditionsDisplay();
        StatisticsDisplay statisticsDisplay = new StatisticsDisplay();
        ForecastDisplay forecastDisplay = new ForecastDisplay();

        weatherData.RegisterObserver(currentConditionsDisplay);
        weatherData.RegisterObserver(statisticsDisplay);
        weatherData.RegisterObserver(forecastDisplay);

        // weather changes simulation
        weatherData.SetMeasurements(80, 65, 1010);
        weatherData.SetMeasurements(82, 70, 1005);
        weatherData.SetMeasurements(78, 90, 1015);
    }
}
